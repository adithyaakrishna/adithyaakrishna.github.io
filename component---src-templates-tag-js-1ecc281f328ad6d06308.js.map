{"version":3,"sources":["webpack:///./src/templates/tag.js"],"names":["StyledTagsContainer","styled","main","theme","mixins","inlineLink","flexBetween","TagTemplate","pageContext","data","location","tag","edges","allMarkdownRemark","title","className","to","map","node","frontmatter","slug","date","tags","key","Date","toLocaleDateString","year","month","day","length","i","kebabCase","pageQuery"],"mappings":"4FAAA,+IAQMA,EAAsBC,IAAOC,KAAV,+EAAGD,CAAH,kQAInB,qBAAGE,MAAkBC,OAAOC,cAI5B,qBAAGF,MAAkBC,OAAOE,eAsFnBC,UAvDK,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SAChCC,EAAQH,EAARG,IACAC,EAAUH,EAAKI,kBAAfD,MAER,OACE,kBAAC,IAAD,CAAQF,SAAUA,GAChB,kBAAC,IAAD,CAAQI,MAAK,YAAcH,IAE3B,kBAACX,EAAD,KACE,0BAAMe,UAAU,cACd,0BAAMA,UAAU,SAAhB,KACA,kBAAC,OAAD,CAAMC,GAAG,aAAT,iBAGF,4BACE,kCAAQL,GACR,8BACE,kBAAC,OAAD,CAAMK,GAAG,kBAAT,mBAIJ,wBAAID,UAAU,cACXH,EAAMK,KAAI,YAAe,IAAD,IAAXC,KAC6BC,YAAjCL,EADe,EACfA,MAAOM,EADQ,EACRA,KAAMC,EADE,EACFA,KAAMC,EADJ,EACIA,KAC3B,OACE,wBAAIC,IAAKH,GACP,4BACE,kBAAC,OAAD,CAAMJ,GAAII,GAAON,IAEnB,uBAAGC,UAAU,YACX,8BACG,IAAIS,KAAKH,GAAMI,mBAAmB,QAAS,CAC1CC,KAAM,UACNC,MAAO,OACPC,IAAK,aAGT,qCACCN,GACCA,EAAKO,OAAS,GACdP,EAAKL,KAAI,SAACN,EAAKmB,GAAN,OACP,kBAAC,OAAD,CAAMP,IAAKO,EAAGd,GAAE,kBAAoBe,IAAUpB,GAA9B,IAAuCI,UAAU,OAAjE,IACIJ,eAoCnB,IAAMqB,EAAS","file":"component---src-templates-tag-js-1ecc281f328ad6d06308.js","sourcesContent":["import React from 'react';\nimport { Link, graphql } from 'gatsby';\nimport kebabCase from 'lodash/kebabCase';\nimport PropTypes from 'prop-types';\nimport { Helmet } from 'react-helmet';\nimport styled from 'styled-components';\nimport { Layout } from '@components';\n\nconst StyledTagsContainer = styled.main`\n  max-width: 1000px;\n\n  a {\n    ${({ theme }) => theme.mixins.inlineLink};\n  }\n\n  h1 {\n    ${({ theme }) => theme.mixins.flexBetween};\n    margin-bottom: 50px;\n\n    a {\n      font-size: var(--fz-lg);\n      font-weight: 400;\n    }\n  }\n\n  ul {\n    li {\n      font-size: 24px;\n      h2 {\n        font-size: inherit;\n        margin: 0;\n        a {\n          color: var(--light-slate);\n        }\n      }\n      .subtitle {\n        color: var(--slate);\n        font-size: var(--fz-sm);\n\n        .tag {\n          margin-right: 10px;\n        }\n      }\n    }\n  }\n`;\n\nconst TagTemplate = ({ pageContext, data, location }) => {\n  const { tag } = pageContext;\n  const { edges } = data.allMarkdownRemark;\n\n  return (\n    <Layout location={location}>\n      <Helmet title={`Tagged: #${tag}`} />\n\n      <StyledTagsContainer>\n        <span className=\"breadcrumb\">\n          <span className=\"arrow\">&larr;</span>\n          <Link to=\"/pensieve\">All memories</Link>\n        </span>\n\n        <h1>\n          <span>#{tag}</span>\n          <span>\n            <Link to=\"/pensieve/tags\">View all tags</Link>\n          </span>\n        </h1>\n\n        <ul className=\"fancy-list\">\n          {edges.map(({ node }) => {\n            const { title, slug, date, tags } = node.frontmatter;\n            return (\n              <li key={slug}>\n                <h2>\n                  <Link to={slug}>{title}</Link>\n                </h2>\n                <p className=\"subtitle\">\n                  <time>\n                    {new Date(date).toLocaleDateString('en-US', {\n                      year: 'numeric',\n                      month: 'long',\n                      day: 'numeric',\n                    })}\n                  </time>\n                  <span>&nbsp;&mdash;&nbsp;</span>\n                  {tags &&\n                    tags.length > 0 &&\n                    tags.map((tag, i) => (\n                      <Link key={i} to={`/pensieve/tags/${kebabCase(tag)}/`} className=\"tag\">\n                        #{tag}\n                      </Link>\n                    ))}\n                </p>\n              </li>\n            );\n          })}\n        </ul>\n      </StyledTagsContainer>\n    </Layout>\n  );\n};\n\nexport default TagTemplate;\n\nTagTemplate.propTypes = {\n  pageContext: PropTypes.shape({\n    tag: PropTypes.string.isRequired,\n  }),\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      totalCount: PropTypes.number.isRequired,\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              title: PropTypes.string.isRequired,\n            }),\n          }),\n        }).isRequired,\n      ),\n    }),\n  }),\n  location: PropTypes.object,\n};\n\nexport const pageQuery = graphql`\n  query($tag: String!) {\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          frontmatter {\n            title\n            description\n            date\n            slug\n            tags\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}