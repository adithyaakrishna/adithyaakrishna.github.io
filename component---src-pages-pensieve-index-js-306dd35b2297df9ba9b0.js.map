{"version":3,"sources":["webpack:///./src/pages/pensieve/index.js"],"names":["StyledMainContainer","styled","main","theme","mixins","flexBetween","StyledGrid","div","StyledPostInner","boxShadow","StyledPost","StyledPostHeader","StyledFolder","StyledPostName","h5","StyledPostDescription","StyledDate","span","StyledTags","ul","PensievePage","location","posts","data","allMarkdownRemark","edges","title","className","href","length","map","i","frontmatter","node","description","slug","date","tags","d","Date","key","tabIndex","to","toLocaleDateString","tag","kebabCase","pageQuery"],"mappings":"2FAAA,2JASMA,EAAsBC,IAAOC,KAAV,gFAAGD,CAAH,2TAgBnB,qBAAGE,MAAkBC,OAAOC,eAK5BC,EAAaL,IAAOM,IAAV,uEAAGN,CAAH,0NAcVO,EAAkBP,IAAOM,IAAV,4EAAGN,CAAH,sOACjB,qBAAGE,MAAkBC,OAAOK,aAC5B,qBAAGN,MAAkBC,OAAOC,eAe1BK,EAAaT,IAAOM,IAAV,uEAAGN,CAAH,4GAOVO,GAKAG,EAAmBV,IAAOM,IAAV,6EAAGN,CAAH,6BAClB,qBAAGE,MAAkBC,OAAOC,eAG1BO,EAAeX,IAAOM,IAAV,yEAAGN,CAAH,qDAOZY,EAAiBZ,IAAOa,GAAV,2EAAGb,CAAH,0EAKdc,EAAwBd,IAAOM,IAAV,kFAAGN,CAAH,8CAIrBe,EAAaf,IAAOgB,KAAV,uEAAGhB,CAAH,6GAMViB,EAAajB,IAAOkB,GAAV,uEAAGlB,CAAH,+NAyFDmB,UArEM,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,SAChBC,EADqC,EAAXC,KACbC,kBAAkBC,MAErC,OACE,kBAAC,IAAD,CAAQJ,SAAUA,GAChB,kBAAC,IAAD,CAAQK,MAAM,aAEd,kBAAC1B,EAAD,KACE,gCACE,wBAAI2B,UAAU,eAAd,YACA,uBAAGA,UAAU,YACX,uBAAGC,KAAK,iEAAR,8BAMJ,kBAACtB,EAAD,KACE,yBAAKqB,UAAU,SACZL,EAAMO,OAAS,GACdP,EAAMQ,KAAI,WAAWC,GAAO,IAClBC,EADiB,EAAdC,KACHD,YACAN,EAAyCM,EAAzCN,MAAOQ,EAAkCF,EAAlCE,YAAaC,EAAqBH,EAArBG,KAAMC,EAAeJ,EAAfI,KAAMC,EAASL,EAATK,KAClCC,EAAI,IAAIC,KAAKH,GAEnB,OACE,kBAAC1B,EAAD,CAAY8B,IAAKT,EAAGU,SAAS,KAC3B,kBAACjC,EAAD,KACE,gCACE,kBAAC,OAAD,CAAMkC,GAAIP,GACR,kBAACxB,EAAD,KACE,kBAACC,EAAD,KACE,kBAAC,IAAD,QAGJ,kBAACC,EAAD,KAAiBa,GACjB,kBAACX,EAAD,KAAwBmB,KAG5B,gCACE,kBAAClB,EAAD,QAAgBsB,EAAEK,sBAClB,kBAACzB,EAAD,KACGmB,EAAKP,KAAI,SAACc,EAAKb,GAAN,OACR,wBAAIS,IAAKT,GACP,kBAAC,OAAD,CACEW,GAAE,kBAAoBG,IAAUD,GAA9B,IACFjB,UAAU,eAFZ,IAGIiB,mBAwB3B,IAAME,EAAS","file":"component---src-pages-pensieve-index-js-306dd35b2297df9ba9b0.js","sourcesContent":["import React from 'react';\nimport { graphql, Link } from 'gatsby';\nimport kebabCase from 'lodash/kebabCase';\nimport PropTypes from 'prop-types';\nimport { Helmet } from 'react-helmet';\nimport styled from 'styled-components';\nimport { Layout } from '@components';\nimport { IconZap } from '@components/icons';\n\nconst StyledMainContainer = styled.main`\n  & > header {\n    margin-bottom: 100px;\n    text-align: center;\n\n    a {\n      &:hover,\n      &:focus {\n        cursor: url(\"data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' width='40' height='48' viewport='0 0 100 100' style='fill:black;font-size:24px;'><text y='50%'>âš¡</text></svg>\")\n            20 0,\n          auto;\n      }\n    }\n  }\n\n  footer {\n    ${({ theme }) => theme.mixins.flexBetween};\n    width: 100%;\n    margin-top: 20px;\n  }\n`;\nconst StyledGrid = styled.div`\n  margin-top: 50px;\n\n  .posts {\n    display: grid;\n    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n    grid-gap: 15px;\n    position: relative;\n\n    @media (max-width: 1080px) {\n      grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n    }\n  }\n`;\nconst StyledPostInner = styled.div`\n  ${({ theme }) => theme.mixins.boxShadow};\n  ${({ theme }) => theme.mixins.flexBetween};\n  flex-direction: column;\n  align-items: flex-start;\n  position: relative;\n  height: 100%;\n  padding: 2rem 1.75rem;\n  border-radius: var(--border-radius);\n  transition: var(--transition);\n  background-color: var(--light-navy);\n\n  header,\n  a {\n    width: 100%;\n  }\n`;\nconst StyledPost = styled.div`\n  transition: var(--transition);\n  cursor: default;\n\n  &:hover,\n  &:focus {\n    outline: 0;\n    ${StyledPostInner} {\n      transform: translateY(-5px);\n    }\n  }\n`;\nconst StyledPostHeader = styled.div`\n  ${({ theme }) => theme.mixins.flexBetween};\n  margin-bottom: 30px;\n`;\nconst StyledFolder = styled.div`\n  color: var(--green);\n  svg {\n    width: 40px;\n    height: 40px;\n  }\n`;\nconst StyledPostName = styled.h5`\n  margin: 0 0 10px;\n  color: var(--lightest-slate);\n  font-size: var(--fz-xxl);\n`;\nconst StyledPostDescription = styled.div`\n  color: var(--light-slate);\n  font-size: 17px;\n`;\nconst StyledDate = styled.span`\n  color: var(--light-slate);\n  font-family: var(--font-mono);\n  font-size: var(--fz-xxs);\n  text-transform: uppercase;\n`;\nconst StyledTags = styled.ul`\n  display: flex;\n  align-items: flex-end;\n  flex-wrap: wrap;\n  padding: 0;\n  margin: 0;\n  list-style: none;\n\n  li {\n    color: var(--green);\n    font-family: var(--font-mono);\n    font-size: var(--fz-xxs);\n    line-height: 1.75;\n\n    &:not(:last-of-type) {\n      margin-right: 15px;\n    }\n  }\n`;\n\nconst PensievePage = ({ location, data }) => {\n  const posts = data.allMarkdownRemark.edges;\n\n  return (\n    <Layout location={location}>\n      <Helmet title=\"Pensieve\" />\n\n      <StyledMainContainer>\n        <header>\n          <h1 className=\"big-heading\">Pensieve</h1>\n          <p className=\"subtitle\">\n            <a href=\"https://www.wizardingworld.com/writing-by-jk-rowling/pensieve\">\n              a collection of memories\n            </a>\n          </p>\n        </header>\n\n        <StyledGrid>\n          <div className=\"posts\">\n            {posts.length > 0 &&\n              posts.map(({ node }, i) => {\n                const { frontmatter } = node;\n                const { title, description, slug, date, tags } = frontmatter;\n                const d = new Date(date);\n\n                return (\n                  <StyledPost key={i} tabIndex=\"0\">\n                    <StyledPostInner>\n                      <header>\n                        <Link to={slug}>\n                          <StyledPostHeader>\n                            <StyledFolder>\n                              <IconZap />\n                            </StyledFolder>\n                          </StyledPostHeader>\n                          <StyledPostName>{title}</StyledPostName>\n                          <StyledPostDescription>{description}</StyledPostDescription>\n                        </Link>\n                      </header>\n                      <footer>\n                        <StyledDate>{`${d.toLocaleDateString()}`}</StyledDate>\n                        <StyledTags>\n                          {tags.map((tag, i) => (\n                            <li key={i}>\n                              <Link\n                                to={`/pensieve/tags/${kebabCase(tag)}/`}\n                                className=\"inline-link\">\n                                #{tag}\n                              </Link>\n                            </li>\n                          ))}\n                        </StyledTags>\n                      </footer>\n                    </StyledPostInner>\n                  </StyledPost>\n                );\n              })}\n          </div>\n        </StyledGrid>\n      </StyledMainContainer>\n    </Layout>\n  );\n};\n\nPensievePage.propTypes = {\n  location: PropTypes.object.isRequired,\n  data: PropTypes.object.isRequired,\n};\n\nexport default PensievePage;\n\nexport const pageQuery = graphql`\n  {\n    allMarkdownRemark(\n      filter: { fileAbsolutePath: { regex: \"/posts/\" }, frontmatter: { draft: { ne: true } } }\n      sort: { fields: [frontmatter___date], order: DESC }\n    ) {\n      edges {\n        node {\n          frontmatter {\n            title\n            description\n            slug\n            date\n            tags\n            draft\n          }\n          html\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}