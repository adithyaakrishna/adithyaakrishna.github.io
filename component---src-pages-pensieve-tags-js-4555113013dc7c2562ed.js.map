{"version":3,"sources":["webpack:///./src/pages/pensieve/tags.js"],"names":["StyledTagsContainer","styled","main","TagsPage","group","data","allMarkdownRemark","location","title","className","to","map","tag","key","fieldValue","kebabCase","totalCount","pageQuery"],"mappings":"6FAAA,+IAQMA,EAAsBC,IAAOC,KAAV,+EAAGD,CAAH,kNAyEVE,UAhDE,SAAC,GAAD,IAEQC,EAFR,EACfC,KACEC,kBAAqBF,MAEvBG,EAJe,EAIfA,SAJe,OAMf,kBAAC,IAAD,CAAQA,SAAUA,GAChB,kBAAC,IAAD,CAAQC,MAAM,SAEd,kBAACR,EAAD,KACE,0BAAMS,UAAU,cACd,0BAAMA,UAAU,SAAhB,KACA,kBAAC,OAAD,CAAMC,GAAG,aAAT,iBAGF,oCACA,wBAAID,UAAU,cACXL,EAAMO,KAAI,SAAAC,GAAG,OACZ,wBAAIC,IAAKD,EAAIE,YACX,kBAAC,OAAD,CAAMJ,GAAE,kBAAoBK,IAAUH,EAAIE,YAAlC,IAAkDL,UAAU,eACjEG,EAAIE,WADP,IACmB,0BAAML,UAAU,SAAhB,IAA0BG,EAAII,WAA9B,cA8BxB,IAAMC,EAAS","file":"component---src-pages-pensieve-tags-js-4555113013dc7c2562ed.js","sourcesContent":["import React from 'react';\nimport { Link, graphql } from 'gatsby';\nimport kebabCase from 'lodash/kebabCase';\nimport PropTypes from 'prop-types';\nimport { Helmet } from 'react-helmet';\nimport styled from 'styled-components';\nimport { Layout } from '@components';\n\nconst StyledTagsContainer = styled.main`\n  max-width: 1000px;\n\n  h1 {\n    margin-bottom: 50px;\n  }\n  ul {\n    color: var(--light-slate);\n\n    li {\n      font-size: var(--fz-xxl);\n\n      a {\n        color: var(--light-slate);\n\n        .count {\n          color: var(--slate);\n          font-family: var(--font-mono);\n          font-size: var(--fz-md);\n        }\n      }\n    }\n  }\n`;\n\nconst TagsPage = ({\n  data: {\n    allMarkdownRemark: { group },\n  },\n  location,\n}) => (\n  <Layout location={location}>\n    <Helmet title=\"Tags\" />\n\n    <StyledTagsContainer>\n      <span className=\"breadcrumb\">\n        <span className=\"arrow\">&larr;</span>\n        <Link to=\"/pensieve\">All memories</Link>\n      </span>\n\n      <h1>Tags</h1>\n      <ul className=\"fancy-list\">\n        {group.map(tag => (\n          <li key={tag.fieldValue}>\n            <Link to={`/pensieve/tags/${kebabCase(tag.fieldValue)}/`} className=\"inline-link\">\n              {tag.fieldValue} <span className=\"count\">({tag.totalCount})</span>\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </StyledTagsContainer>\n  </Layout>\n);\n\nTagsPage.propTypes = {\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      group: PropTypes.arrayOf(\n        PropTypes.shape({\n          fieldValue: PropTypes.string.isRequired,\n          totalCount: PropTypes.number.isRequired,\n        }).isRequired,\n      ),\n    }),\n    site: PropTypes.shape({\n      siteMetadata: PropTypes.shape({\n        title: PropTypes.string.isRequired,\n      }),\n    }),\n  }),\n  location: PropTypes.object,\n};\n\nexport default TagsPage;\n\nexport const pageQuery = graphql`\n  query {\n    allMarkdownRemark(limit: 2000, filter: { frontmatter: { draft: { ne: true } } }) {\n      group(field: frontmatter___tags) {\n        fieldValue\n        totalCount\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}